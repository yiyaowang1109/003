version: '3.8'

services:
  # MinIO Service
  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_DOMAIN=minio
    ports:
      - 9001:9001  # Console Port
      - 9000:9000  # API Port
    volumes:
      - minio_data:/data
    command: ["server", "/data", "--console-address", ":9001"]
    networks:
      - minio_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      retries: 3
      start_period: 30s

  # MinIO Client
  minio_client:
    container_name: minio_client
    depends_on:
      - minio
    image: minio/mc
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - AWS_REGION=us-east-1
    entrypoint: >
      /bin/bash -c "
      until /usr/bin/mc config host add minio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}; do
        echo 'Waiting for MinIO to be ready...';
        sleep 1;
      done;
      sleep 5;
      /usr/bin/mc rm -r --force minio/icebergwarehouse;
      sleep 2;
      /usr/bin/mc mb minio/icebergwarehouse;
      mc anonymous set public minio/icebergwarehouse;
      sleep 2;
      /usr/bin/mc rm -r --force minio/iftbigdata;
      sleep 2;
      /usr/bin/mc mb minio/iftbigdata;
      mc anonymous set public minio/iftbigdata;
      tail -f /dev/null;
      "
    networks:
      - minio_network
    healthcheck:
      test: ["CMD", "mc", "ls", "minio/"]
      interval: 30s
      retries: 3
      start_period: 30s

  # PostgreSQL Service
  postgres:
    image: postgres:10.5
    container_name: postgres
    restart: always
    environment:
      PGDATA: /var/lib/postgresql/data/some-data
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - 5432:5432
    volumes:
      - /data/pgsql/data:/var/lib/postgresql/data/some-data

  # Redis Service
  redis:
    image: redis:7.0-alpine
    container_name: redis
    ports:
      - 6379:6379   # Default Redis port
    volumes:
      - redis_data:/data  # Persists Redis data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      retries: 3
      start_period: 10s

networks:
  minio_network:
    driver: bridge

volumes:
  minio_data:
    driver: local
  redis_data:
    driver: local
